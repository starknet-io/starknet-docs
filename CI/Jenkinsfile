pipeline {
    agent { label "gcp-hodor-slave-generic"}
    options {
       // Add timestamps to output.
       timestamps()
       timeout(time: 10, unit: 'MINUTES')
    }
    environment {
        owner = 'starknet-io'
        repo = 'starknet-docs'
        prId = "${env.CHANGE_ID}"
        prPrefix = "pr"
        gitCreds = credentials('gh-starknet-docs-pat')
        comment = "Your preview build is ready! âœ¨ Check the following link in 1-2 minutes: https://${owner}.github.io/${repo}/${prId}/documentation/ ."
    }
    
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:16.20.2'
                    reuseNode true
                }
            }
            environment {
                ANTORA_CACHE_DIR="${WORKSPACE}/.cache"
            }
            steps {
                script {
                    sh label:"Install node modules", script:
                    """
                        yarn
                    """
                    sh label:"Generate site", script:
                    """
                        yarn generate
                    """
                    sh label:"Copy artifacts", script:
                    """
                        mkdir ${prPrefix}-${prId}
                        cp -r ./public_html/* ${prPrefix}-${prId}
                    """
                    stash includes: "${prPrefix}-${prId}/**/*", name: 'artifact'
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    def commitMessage = "Adding or updating preview build for PR: ${prId}"
                    sh label:"Git clone", script:
                    '''
                        git clone https://${gitCreds_PSW}@github.com/starknet-io/starknet-docs.git
                        source_branch=\$(git branch --show-current)
                        echo "source_branch: \$source_branch"
                    '''
                    sh label:"Git config", script:
                    """
                        git config --global user.name "Starkware Jenkins"
                        git config --global user.email "starkware-jenkins@noreply.com"
                    """
                    dir('starknet-docs') {
                        sh label:"Remove PR folder if exist", script:
                        """
                            if [ -d ${prPrefix}-${prId} ]
                            then
                                rm -rf ${prPrefix}-${prId}
                            fi
                        """
                        sh label:"Checkout gh-pages", script:
                        """
                            git checkout gh-pages
                        """
                        unstash 'artifact'
                        sh label:"Push to branch gh-pages", script:
                        '''
                            git add ${prPrefix}-${prId}
                            if ! git diff-index --quiet HEAD --; then
                                echo "Changes detected. Committing and pushing changes."
                                echo "Commit message: ${commitMessage}"
                                git commit -m ${commitMessage}
                                echo "Commit successful. Pushing changes."
                                git push
                                git checkout \$source_branch
                                python3 CI/scripts/comment_pr.py -a ${gitCreds_PSW} -o ${owner} -r ${repo} -p ${prId} -c ${comment}
                            else
                                echo "No changes found."
                            fi
                        '''
                    }
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}
