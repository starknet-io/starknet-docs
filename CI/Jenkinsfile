import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.net.HttpURLConnection
import java.net.URL
import java.io.OutputStreamWriter

def commentOnPullRequest(String apiUrl, String authToken, String owner, String repo, int pullRequestNumber, String comment) {
    try {
        // Construct the URL for the GitHub API endpoint
        def url = new URL("${apiUrl}/repos/${owner}/${repo}/issues/${pullRequestNumber}/comments")
        
        // Open connection
        def con = url.openConnection() as HttpURLConnection
        
        // Set request method and headers
        con.setRequestMethod("POST")
        con.setRequestProperty("Authorization", "token ${authToken}")
        con.setRequestProperty("Content-Type", "application/json")
        con.setDoOutput(true)
        
        // Construct JSON payload for the comment
        def payload = JsonOutput.toJson([body: comment])
        
        // Write payload to request body
        def writer = new OutputStreamWriter(con.getOutputStream())
        writer.write(payload)
        writer.flush()
        
        // Get response code
        int responseCode = con.getResponseCode()
        println("Response Code: ${responseCode}")
        
        // Read response body
        def response = con.getInputStream().getText()
        println("Response Body: ${response}")
        
        // Close connection
        con.disconnect()
    } catch (Exception e) {
        println("Exception occurred: ${e.getMessage()}")
    }
}

pipeline {
    agent { label "gcp-hodor-slave-generic"}
    options {
       // Add timestamps to output.
       timestamps()
       timeout(time: 10, unit: 'MINUTES')
    }
    environment {
        apiUrl = 'https://api.github.com'
        owner = 'starknet-io'
        repo = 'starknet-docs'
        comment = 'Test'
        prId = "${env.CHANGE_ID}"
        prPrefix = "pr"
        gitCreds = credentials('gh-starknet-docs-pat')
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:16.20.2'
                    reuseNode true
                }
            }
            environment {
                ANTORA_CACHE_DIR="${WORKSPACE}/.cache"
            }
            steps {
                script {
                    sh label:"Install node modules", script:
                    """
                        yarn
                    """
                    sh label:"Generate site", script:
                    """
                        yarn generate
                    """
                    sh label:"Copy artifacts", script:
                    """
                        mkdir ${prPrefix}-${prId}
                        cp -r ./public_html/* ${prPrefix}-${prId}
                    """
                    stash includes: "${prPrefix}-${prId}/**/*", name: 'artifact'
                    deleteDir()
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    def commitMessage = "Adding or updating preview build for PR: ${prId}"
                    sh label:"Git clone", script:
                    '''
                        git clone https://$gitCreds_PSW@github.com/starknet-io/starknet-docs.git
                    '''
                    sh label:"Git config", script:
                    """
                        git config --global user.name "Starkware Jenkins"
                        git config --global user.email "starkware-jenkins@noreply.com"
                    """
                    dir('starknet-docs') {
                        sh label:"Remove PR folder if exist", script:
                        """
                            if [ -d ${prPrefix}-${prId} ]
                            then
                                rm -rf ${prPrefix}-${prId}
                            fi
                        """
                        sh label:"Checkout gh-pages", script:
                        """
                            git checkout gh-pages
                        """
                        unstash 'artifact'
                        sh label:"Push to branch gh-pages", script:
                        """
                            git add ${prPrefix}-${prId}
                            if ! git diff-index --quiet HEAD --; then
                                echo "Changes detected. Committing and pushing changes."
                                echo "Commit message: ${commitMessage}"
                                git commit -m "${commitMessage}"
                                echo "Commit successful. Pushing changes."
                                git push
                            else
                                echo "No changes found."
                            fi
                        """
                    }
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
        success {
            script {
                // Call the function to comment on the pull request
                this.commentOnPullRequest(env.apiUrl, env.gitCreds_PSW, env.owner, env.repo, env.prId, env.comment)
            }
        }
    }
}
